// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// max_flow_sufficient_r
int max_flow_sufficient_r(const Rcpp::IntegerMatrix& delta_in);
RcppExport SEXP _econometric_factor_identification_max_flow_sufficient_r(SEXP delta_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type delta_in(delta_inSEXP);
    rcpp_result_gen = Rcpp::wrap(max_flow_sufficient_r(delta_in));
    return rcpp_result_gen;
END_RCPP
}
// counting_rule_holds_r
bool counting_rule_holds_r(const Rcpp::IntegerMatrix& delta_in);
RcppExport SEXP _econometric_factor_identification_counting_rule_holds_r(SEXP delta_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type delta_in(delta_inSEXP);
    rcpp_result_gen = Rcpp::wrap(counting_rule_holds_r(delta_in));
    return rcpp_result_gen;
END_RCPP
}
// max_flow_necessary_r
int max_flow_necessary_r(const Rcpp::IntegerMatrix& delta_in);
RcppExport SEXP _econometric_factor_identification_max_flow_necessary_r(SEXP delta_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type delta_in(delta_inSEXP);
    rcpp_result_gen = Rcpp::wrap(max_flow_necessary_r(delta_in));
    return rcpp_result_gen;
END_RCPP
}
// necessary_condition_holds_r
bool necessary_condition_holds_r(const Rcpp::IntegerMatrix& delta_in);
RcppExport SEXP _econometric_factor_identification_necessary_condition_holds_r(SEXP delta_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type delta_in(delta_inSEXP);
    rcpp_result_gen = Rcpp::wrap(necessary_condition_holds_r(delta_in));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_econometric_factor_identification_max_flow_sufficient_r", (DL_FUNC) &_econometric_factor_identification_max_flow_sufficient_r, 1},
    {"_econometric_factor_identification_counting_rule_holds_r", (DL_FUNC) &_econometric_factor_identification_counting_rule_holds_r, 1},
    {"_econometric_factor_identification_max_flow_necessary_r", (DL_FUNC) &_econometric_factor_identification_max_flow_necessary_r, 1},
    {"_econometric_factor_identification_necessary_condition_holds_r", (DL_FUNC) &_econometric_factor_identification_necessary_condition_holds_r, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_econometric_factor_identification(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
